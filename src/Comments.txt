/**I-TAINMENT**/

*****I recommend to read Comments for Backend first****

Firstly I created the application using the react create app command. After, I installed necessary dependencies I needed including
axios, cors, react-bootstrap, react-dom and react icons.

I then went to www.bootswatch.com and downloaded the theme for my application. I then included bootstrap links in my index.html file under public.
I also changed the app title to I-TAINMENT.
I then created a folder called css, inside with bootswatch.css file with all application css.
The application is mainly styled with bootsrap from forms, buttons with a few custom styles I made via id elements.

After I created a component called Navbar. This component is for navigation. In this component, I imported my css, Link from react-router-dom and some react icons.
I went to App.js, created a prop for application title. I then called the prop inside Navbar with the name titleProp, that I called with h3 attributes.
I then added Links to Home and Favourites for user to have easy navigation. 

I then created component called Home, in which I wrote functionality for my application. This include search function which user 
uses to search for anything they need. I added the backend url, states for api results and search. The search function works with either searched word or category click.
I then created the Category component that utilizes the setSearch state and handleSearch function respectively. For this to work, when user clicks on the category
It sets the isFilterButtonClick button to true prompting setSearch state to return the media category in line with what has been clicked. I added className with prop selectCategory, 
which is basically a bootstrap button that reads if the button reads movie, podcast or anything else. Now once the user types anything,
and clicks the category, it will automatically return the media category in line with what they clicked. 
After, I went to App.js, imported the component and linked the Home link from Navbar component using react-router-dom functionalities.

I then fixed the Search button, setting it with search, handleInputChange and handleSearch properties. Now in this component
when user searches something, the value is changed by calling the search function determing that this is userInput set as a string.
It the calls handleInputChange which returns the value sitting in the search bar via event.target.value. Now when user clicks Search button,
It calls the handleSearch function via handleSearch property prompting the function to return what has been searched via the api.
The search function works like this: If filter button is false, then automatically we know the input is not category type, 
we then set the result from api into a variable called searchResult. We then convert that data to json format using 
variable called dataFromAPI. Since this data should be stored in array format for our apiResults state, we then set the data
into a variable called totalData which in array format. If there's an error receiving data, we catch it by try catch functionality then 
finally we set totalData into setApiResults state.
handleSearch function is using fetch functionality to fetch data from api
I also added functionality to prevent default behavior of page loading when search button is clicked.

I then created the Feed component. In this component, I called the apiResults state so when user searches something, the result is fed onto the
page automatically. In this component, I utilized the react-bootstrap Card styling so my feed looks nice.I also added custom styles. Now the Feed works as follows:
The apiResults prop is called, and it calls apiResults state sitting in Home that has been fed by setApiResults state from that handleSearch functionality.
Once called, we map through the data individually using a key set to index. We then use variable apiResult to call the exact
variables used by apple for example apiResult.artworkUrl60. This returns a picture of the media we have searched. I used Card.Img to display the picture nicely.
We then call the rest of the variables like trackName and artistName etc. All this will be displayed on the page. I then added some functionality for liking and dislikin
media using react-icon Fa-Heart.

I then created a component called Favourites since user wants to add favorites. After creating this component, I went to App.js and imported the component and linked it again
using react-router-dom functionality. I created state favorites and setFavourites via useState hook.
Now, in Favourites component works like this: When user searches something and its displayed on the page via the Feed component, when they click the heart button, 
this will change the status alerting handleFavourite functionality to add new media into our favorites array
.Now handleFavourite function works by first checking if the index media clicked is actually in the setApiResults array state. 
It will then set Favourites with the index media
liked otherwise we create a new array so if user got a bunch of media they like, we we'll store them in this array. Again we setFavourites with the
new array created.Now in the Feed component I created a prop so we can add functionality to the feed page when information is displayed. Now when user clicks the heart icon from Feed component
, it sends that information to Favourites component via favourites state fed by setFavourites via handleFavourites functionality
sitting in Home component. Now in Favourites component, we again map individually each media favoured and use the Card display functionality from
react-bootstrap to display the media nicely. 
Once the user clicks on the like button, localStorage creates a storage called favourites that stores all the media 
like by the user, by first converting data into a JSON string. 
Inside the Favourites component I created a function that changes the status of the media in case user unlikes the media. It then updates the setFavourites state
with the updated favourites/(s).

I created Footer component which shows the current year and copyright logo.

Finally I then created a file called Home.test.js and tested my Home component for functionality if its receiving data from api rout.
I used react-test-renderer for testing creating snapshots of the tests.
I tested first if the component is working as expected then if fetch method is fetching data from api. I then created a folder
called testing and added the screenshot

/**REFERENCES**/
I watched the below videos before attempting this task:
https://www.youtube.com/watch?v=0wg0pP-jZhM&ab_channel=KadirMedia
https://www.youtube.com/watch?v=vxUfx4aM5d8&ab_channel=RoadsideCoder
https://www.youtube.com/watch?v=8vfQ6SWBZ-U
Level 2, Task 15 Compulsory Task 1

I used theme from bootstrap via: 
https://bootswatch.com/

Thank You

